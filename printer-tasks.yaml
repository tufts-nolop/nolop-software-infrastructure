---
- hosts: p1
  remote_user: pi
  #vars_prompt:
  #  - name: ddns_api_key
  #    prompt: Enter the DNS API key
  vars_prompt:
    - name: admin_pw
      prompt: Enter the Octoprint admin password
  tasks:
    - name: Add user nolop
      shell: /home/pi/oprint/bin/octoprint user add --password 3dprint --group users nolop
    - name: Add user admin
      shell: /home/pi/oprint/bin/octoprint user add --password {{ admin_pw|quote }} --admin admin

    - name: Restart Octoprint
      become: yes
      ansible.builtin.service:
        name: octoprint
        state: restarted

    - name: Open YAML config file
      slurp:
        path: /home/pi/.octoprint/config.yaml
      register: r_config
    - name: Read config file to dictionary
      set_fact:
        config_dict: "{{ r_config['content'] | b64decode | from_yaml }}"
    - name: Patch dictionary
      set_fact:
        config_dict: "{{ config_dict | combine(newdata, recursive=True) }}"
      vars:
        newdata:
          appearance:
            color: blue
            name: "{{ ansible_host }}"
          plugins:
            curalegacy:
              cura_engine: /usr/local/bin/cura_engine
            tracking:
              enabled: true
          serial:
            autoconnect: true
            baudrate: 115200
            port: /dev/ttyACM0
          server:
            firstRun: false
            onlineCheck:
              enabled: true
            pluginBlacklist:
              enabled: true
    - name: Write dict to new YAML file
      copy:
        content: "{{ config_dict | to_nice_yaml }}"
        dest: /home/pi/.octoprint/config.yaml

    - name: Add printer profile for Prusa MK3S+
      ansible.builtin.copy:
        src: ./printerProfiles/nolop_prusa_mk3.profile
        dest: /home/pi/.octoprint/printerProfiles/nolop_prusa_mk3.profile
        owner: pi
        group: pi
        mode: '0744'

    - name: Add slicing profile for PLA
      ansible.builtin.copy:
        src: ./slicingProfiles/curalegacy/nolop_prusa_pla.profile
        dest: /home/pi/.octoprint/slicingProfiles/curalegacy/nolop_prusa_pla.profile
        owner: pi
        group: pi
        mode: '0744'
    - name: Add slicing profile for TPU
      ansible.builtin.copy:
        src: ./slicingProfiles/curalegacy/nolop_prusa_tpu.profile
        dest: /home/pi/.octoprint/slicingProfiles/curalegacy/nolop_prusa_tpu.profile
        owner: pi
        group: pi
        mode: '0744'

# install rust with rustup, then
# sudo ln -s /home/pi/.cargo/bin/rustc /usr/local/bin/rustc
# sudo ln -s /home/pi/.cargo/bin/cargo /usr/local/bin/cargo

    - name: Install avrdude
      become: yes
      apt:
        name: avrdude
        state: present

    - name: Install plugins
      ansible.builtin.pip:
        executable: /home/pi/oprint/bin/pip
        name:
          - https://github.com/OctoPrint/OctoPrint-CuraEngineLegacy/archive/refs/tags/1.1.2.zip
          - https://github.com/jneilliii/OctoPrint-ipOnConnect/archive/refs/tags/0.2.4.zip
          - https://github.com/tjjfvi/OctoPrint-BetterHeaterTimeout/archive/refs/tags/v1.3.0.zip
          - https://github.com/kennethjiang/OctoPrint-Slicer/archive/refs/tags/2.0.0.zip
          - https://github.com/OctoPrint/OctoPrint-FirmwareUpdater/archive/refs/tags/1.14.0.zip
          - certbot-plugin-gandi

    - name: Check Octoprint and plugins version
      shell: /home/pi/oprint/bin/octoprint plugins softwareupdate:check && cat /etc/octopi_version
      register: command_output
    - debug:
        var: command_output.stdout_lines
    - name: Add periodic task to broadcast hostname and IP via UDP
      ansible.builtin.cron:
        name: "broadcast-ip"
        minute: "*/5"
        job: "/home/pi/broadcast-ip.sh"
    - name: Add broadcast script
      ansible.builtin.copy:
        src: ./broadcast-ip.sh
        dest: /home/pi/broadcast-ip.sh
        owner: pi
        group: pi
        mode: '0744'
    - name: Add periodic task to update DNS record dynamically if IP changes
      ansible.builtin.cron:
        name: "ddns-update-ip"
        minute: "*/5"
        job: "python3 /home/pi/ddns-update-ip.py"
    - name: Add dynamic DNS script
      ansible.builtin.copy:
        src: ./ddns-update-ip.py
        dest: /home/pi/ddns-update-ip.py
        owner: pi
        group: pi
        mode: '0744'
#    - name: Add dynamic DNS config file
#      ansible.builtin.copy:
#        src: ./ddns-config.txt
#        dest: /home/pi/ddns-config.txt
#        owner: pi
#        group: pi
#        mode: '0644'
#    - name: Ensure DNS API key is present in dynamic DNS config file
#      ansible.builtin.lineinfile:
#        path: /home/pi/ddns-config.txt
#        line: "apikey = {{ ddns_api_key }}"
#        insertafter: "# gandi.net API key"

    - name: Add Let's Encrypt Certbot service file
      become: yes
      ansible.builtin.copy:
        src: ./certbot.service
        dest: /lib/systemd/system/certbot.service
        owner: root
        group: root
        mode: '0644'
    - name: Add Let's Encrypt Certbot timer file
      become: yes
      ansible.builtin.copy:
        src: ./certbot.timer
        dest: /lib/systemd/system/certbot.timer
        owner: root
        group: root
        mode: '0644'
    - name: Enable service certbot and ensure it is not masked
      become: yes
      ansible.builtin.systemd:
        name: certbot
        enabled: true
        masked: no
        state: started
    - name: Add SSL cert post-renewal script for Haproxy
      become: yes
      ansible.builtin.copy:
        src: ./install-ssl-cert-for-haproxy.sh # BUG: need to add a hostname variable to this file
        dest: /etc/letsencrypt/renewal-hooks/post/install-ssl-cert-for-haproxy.sh
        owner: root
        group: root
        mode: '0750'
    - name: Add Let's Encrypt DNS credentials for renewal
      become: yes
      ansible.builtin.copy:
        src: ./gandi.ini # BUG: need to add DNS API key variable to this file-- already have the key from up top
        dest: /etc/letsencrypt/gandi.ini
        owner: root
        group: root
        mode: '0600'
